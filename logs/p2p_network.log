import socket
import threading
import logging

# Set up logger for P2P network
p2p_logger = logging.getLogger('p2p_network_logger')
p2p_logger.setLevel(logging.DEBUG)

# Create file handler which logs even debug messages
file_handler = logging.FileHandler('logs/p2p_network.log')
file_handler.setLevel(logging.DEBUG)

# Create formatter and add it to the handler
formatter = logging.Formatter('%(asctime)s - %(name)s - %(levelname)s - %(message)s')
file_handler.setFormatter(formatter)

# Add the handler to the logger
p2p_logger.addHandler(file_handler)

class Node:
    def __init__(self, host='127.0.0.1', port=5000):
        self.host = host
        self.port = port
        self.peers = []

    def handle_peer(self, conn, addr):
        p2p_logger.info(f"Connected to peer at {addr}")
        while True:
            data = conn.recv(1024)
            if not data:
                break
            p2p_logger.info(f"Received data: {data.decode()}")
        conn.close()
        p2p_logger.info(f"Connection closed with {addr}")

    def start(self):
        server = socket.socket(socket.AF_INET, socket.SOCK_STREAM)
        server.bind((self.host, self.port))
        server.listen(5)
        p2p_logger.info(f"Node started at {self.host}:{self.port}")
        while True:
            conn, addr = server.accept()
            threading.Thread(target=self.handle_peer, args=(conn, addr)).start()

    def connect_to_peer(self, peer_host, peer_port):
        peer = socket.socket(socket.AF_INET, socket.SOCK_STREAM)
        peer.connect((peer_host, peer_port))
        self.peers.append((peer_host, peer_port))
        p2p_logger.info(f"Connected to peer at {peer_host}:{peer_port}")
        peer.send(b"Test log data")
        peer.close()

if __name__ == "__main__":
    node = Node(host='127.0.0.1', port=5001)
    threading.Thread(target=node.start).start()

    peer_host = '127.0.0.1'
    peer_port = 5000
    node.connect_to_peer(peer_host, peer_port)
